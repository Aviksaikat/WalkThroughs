// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: pb/challenge.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EcdhKey_CurveID int32

const (
	EcdhKey_RESERVED  EcdhKey_CurveID = 0
	EcdhKey_SECP224R1 EcdhKey_CurveID = 1
	EcdhKey_SECP256R1 EcdhKey_CurveID = 2
)

// Enum value maps for EcdhKey_CurveID.
var (
	EcdhKey_CurveID_name = map[int32]string{
		0: "RESERVED",
		1: "SECP224R1",
		2: "SECP256R1",
	}
	EcdhKey_CurveID_value = map[string]int32{
		"RESERVED":  0,
		"SECP224R1": 1,
		"SECP256R1": 2,
	}
)

func (x EcdhKey_CurveID) Enum() *EcdhKey_CurveID {
	p := new(EcdhKey_CurveID)
	*p = x
	return p
}

func (x EcdhKey_CurveID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcdhKey_CurveID) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_challenge_proto_enumTypes[0].Descriptor()
}

func (EcdhKey_CurveID) Type() protoreflect.EnumType {
	return &file_pb_challenge_proto_enumTypes[0]
}

func (x EcdhKey_CurveID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcdhKey_CurveID.Descriptor instead.
func (EcdhKey_CurveID) EnumDescriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{2, 0}
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *Point) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Point) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

type Ciphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iv   []byte `protobuf:"bytes,1,opt,name=iv,proto3" json:"iv,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Mac  []byte `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *Ciphertext) Reset() {
	*x = Ciphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ciphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ciphertext) ProtoMessage() {}

func (x *Ciphertext) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ciphertext.ProtoReflect.Descriptor instead.
func (*Ciphertext) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *Ciphertext) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *Ciphertext) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Ciphertext) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

type EcdhKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Curve  EcdhKey_CurveID `protobuf:"varint,1,opt,name=curve,proto3,enum=challenge.EcdhKey_CurveID" json:"curve,omitempty"`
	Public *Point          `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *EcdhKey) Reset() {
	*x = EcdhKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdhKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdhKey) ProtoMessage() {}

func (x *EcdhKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdhKey.ProtoReflect.Descriptor instead.
func (*EcdhKey) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *EcdhKey) GetCurve() EcdhKey_CurveID {
	if x != nil {
		return x.Curve
	}
	return EcdhKey_RESERVED
}

func (x *EcdhKey) GetPublic() *Point {
	if x != nil {
		return x.Public
	}
	return nil
}

type EcdhPrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     *EcdhKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Private []byte   `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *EcdhPrivateKey) Reset() {
	*x = EcdhPrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdhPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdhPrivateKey) ProtoMessage() {}

func (x *EcdhPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdhPrivateKey.ProtoReflect.Descriptor instead.
func (*EcdhPrivateKey) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *EcdhPrivateKey) GetKey() *EcdhKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EcdhPrivateKey) GetPrivate() []byte {
	if x != nil {
		return x.Private
	}
	return nil
}

type ServerHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *EcdhKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	EncryptedFlag *Ciphertext `protobuf:"bytes,2,opt,name=encrypted_flag,json=encryptedFlag,proto3" json:"encrypted_flag,omitempty"`
}

func (x *ServerHello) Reset() {
	*x = ServerHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHello) ProtoMessage() {}

func (x *ServerHello) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHello.ProtoReflect.Descriptor instead.
func (*ServerHello) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *ServerHello) GetKey() *EcdhKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ServerHello) GetEncryptedFlag() *Ciphertext {
	if x != nil {
		return x.EncryptedFlag
	}
	return nil
}

type ClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *EcdhKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ClientHello) Reset() {
	*x = ClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHello) ProtoMessage() {}

func (x *ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHello.ProtoReflect.Descriptor instead.
func (*ClientHello) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *ClientHello) GetKey() *EcdhKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type SessionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedData *Ciphertext `protobuf:"bytes,1,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
}

func (x *SessionMessage) Reset() {
	*x = SessionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMessage) ProtoMessage() {}

func (x *SessionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMessage.ProtoReflect.Descriptor instead.
func (*SessionMessage) Descriptor() ([]byte, []int) {
	return file_pb_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *SessionMessage) GetEncryptedData() *Ciphertext {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

var File_pb_challenge_proto protoreflect.FileDescriptor

var file_pb_challenge_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22,
	0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x79, 0x22, 0x42, 0x0a, 0x0a, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x45, 0x63, 0x64,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x45, 0x63, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49, 0x44, 0x52,
	0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x35, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43,
	0x50, 0x32, 0x32, 0x34, 0x52, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50,
	0x32, 0x35, 0x36, 0x52, 0x31, 0x10, 0x02, 0x22, 0x50, 0x0a, 0x0e, 0x45, 0x63, 0x64, 0x68, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x45, 0x63, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x45, 0x63, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x33, 0x0a, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x24, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x2e, 0x45, 0x63, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_challenge_proto_rawDescOnce sync.Once
	file_pb_challenge_proto_rawDescData = file_pb_challenge_proto_rawDesc
)

func file_pb_challenge_proto_rawDescGZIP() []byte {
	file_pb_challenge_proto_rawDescOnce.Do(func() {
		file_pb_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_challenge_proto_rawDescData)
	})
	return file_pb_challenge_proto_rawDescData
}

var file_pb_challenge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pb_challenge_proto_goTypes = []interface{}{
	(EcdhKey_CurveID)(0),   // 0: challenge.EcdhKey.CurveID
	(*Point)(nil),          // 1: challenge.Point
	(*Ciphertext)(nil),     // 2: challenge.Ciphertext
	(*EcdhKey)(nil),        // 3: challenge.EcdhKey
	(*EcdhPrivateKey)(nil), // 4: challenge.EcdhPrivateKey
	(*ServerHello)(nil),    // 5: challenge.ServerHello
	(*ClientHello)(nil),    // 6: challenge.ClientHello
	(*SessionMessage)(nil), // 7: challenge.SessionMessage
}
var file_pb_challenge_proto_depIdxs = []int32{
	0, // 0: challenge.EcdhKey.curve:type_name -> challenge.EcdhKey.CurveID
	1, // 1: challenge.EcdhKey.public:type_name -> challenge.Point
	3, // 2: challenge.EcdhPrivateKey.key:type_name -> challenge.EcdhKey
	3, // 3: challenge.ServerHello.key:type_name -> challenge.EcdhKey
	2, // 4: challenge.ServerHello.encrypted_flag:type_name -> challenge.Ciphertext
	3, // 5: challenge.ClientHello.key:type_name -> challenge.EcdhKey
	2, // 6: challenge.SessionMessage.encrypted_data:type_name -> challenge.Ciphertext
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pb_challenge_proto_init() }
func file_pb_challenge_proto_init() {
	if File_pb_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ciphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdhKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdhPrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_challenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_challenge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_challenge_proto_goTypes,
		DependencyIndexes: file_pb_challenge_proto_depIdxs,
		EnumInfos:         file_pb_challenge_proto_enumTypes,
		MessageInfos:      file_pb_challenge_proto_msgTypes,
	}.Build()
	File_pb_challenge_proto = out.File
	file_pb_challenge_proto_rawDesc = nil
	file_pb_challenge_proto_goTypes = nil
	file_pb_challenge_proto_depIdxs = nil
}
